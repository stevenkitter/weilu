// Code generated by protoc-gen-go. DO NOT EDIT.
// source: wx.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// WXMessage incoming body message
// 用于解密微信的消息
type WXEncryptedMessage struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	MsgSignature         string   `protobuf:"bytes,2,opt,name=msgSignature,proto3" json:"msgSignature,omitempty"`
	Timestamp            string   `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Nonce                string   `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WXEncryptedMessage) Reset()         { *m = WXEncryptedMessage{} }
func (m *WXEncryptedMessage) String() string { return proto.CompactTextString(m) }
func (*WXEncryptedMessage) ProtoMessage()    {}
func (*WXEncryptedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c1d0c4837678df8, []int{0}
}

func (m *WXEncryptedMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WXEncryptedMessage.Unmarshal(m, b)
}
func (m *WXEncryptedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WXEncryptedMessage.Marshal(b, m, deterministic)
}
func (m *WXEncryptedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WXEncryptedMessage.Merge(m, src)
}
func (m *WXEncryptedMessage) XXX_Size() int {
	return xxx_messageInfo_WXEncryptedMessage.Size(m)
}
func (m *WXEncryptedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_WXEncryptedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_WXEncryptedMessage proto.InternalMessageInfo

func (m *WXEncryptedMessage) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *WXEncryptedMessage) GetMsgSignature() string {
	if m != nil {
		return m.MsgSignature
	}
	return ""
}

func (m *WXEncryptedMessage) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *WXEncryptedMessage) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

// WXTicketReq save the decrypted message
// 用于保存ticket
type WXTicketReq struct {
	AppID                string   `protobuf:"bytes,1,opt,name=appID,proto3" json:"appID,omitempty"`
	InfoType             string   `protobuf:"bytes,2,opt,name=infoType,proto3" json:"infoType,omitempty"`
	Component            string   `protobuf:"bytes,3,opt,name=component,proto3" json:"component,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WXTicketReq) Reset()         { *m = WXTicketReq{} }
func (m *WXTicketReq) String() string { return proto.CompactTextString(m) }
func (*WXTicketReq) ProtoMessage()    {}
func (*WXTicketReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c1d0c4837678df8, []int{1}
}

func (m *WXTicketReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WXTicketReq.Unmarshal(m, b)
}
func (m *WXTicketReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WXTicketReq.Marshal(b, m, deterministic)
}
func (m *WXTicketReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WXTicketReq.Merge(m, src)
}
func (m *WXTicketReq) XXX_Size() int {
	return xxx_messageInfo_WXTicketReq.Size(m)
}
func (m *WXTicketReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WXTicketReq.DiscardUnknown(m)
}

var xxx_messageInfo_WXTicketReq proto.InternalMessageInfo

func (m *WXTicketReq) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

func (m *WXTicketReq) GetInfoType() string {
	if m != nil {
		return m.InfoType
	}
	return ""
}

func (m *WXTicketReq) GetComponent() string {
	if m != nil {
		return m.Component
	}
	return ""
}

// Base response struct
// 基本的返回值
type Resp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data                 string   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Resp) Reset()         { *m = Resp{} }
func (m *Resp) String() string { return proto.CompactTextString(m) }
func (*Resp) ProtoMessage()    {}
func (*Resp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c1d0c4837678df8, []int{2}
}

func (m *Resp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resp.Unmarshal(m, b)
}
func (m *Resp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resp.Marshal(b, m, deterministic)
}
func (m *Resp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resp.Merge(m, src)
}
func (m *Resp) XXX_Size() int {
	return xxx_messageInfo_Resp.Size(m)
}
func (m *Resp) XXX_DiscardUnknown() {
	xxx_messageInfo_Resp.DiscardUnknown(m)
}

var xxx_messageInfo_Resp proto.InternalMessageInfo

func (m *Resp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Resp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *Resp) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

//GetTicketReq get the saved appid's ticket
type GetTicketReq struct {
	AppID                string   `protobuf:"bytes,1,opt,name=appID,proto3" json:"appID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTicketReq) Reset()         { *m = GetTicketReq{} }
func (m *GetTicketReq) String() string { return proto.CompactTextString(m) }
func (*GetTicketReq) ProtoMessage()    {}
func (*GetTicketReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c1d0c4837678df8, []int{3}
}

func (m *GetTicketReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTicketReq.Unmarshal(m, b)
}
func (m *GetTicketReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTicketReq.Marshal(b, m, deterministic)
}
func (m *GetTicketReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTicketReq.Merge(m, src)
}
func (m *GetTicketReq) XXX_Size() int {
	return xxx_messageInfo_GetTicketReq.Size(m)
}
func (m *GetTicketReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTicketReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetTicketReq proto.InternalMessageInfo

func (m *GetTicketReq) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

//GetAccessTokenReq get access token 第三平台的token
type GetAccessTokenReq struct {
	AppID                string   `protobuf:"bytes,1,opt,name=appID,proto3" json:"appID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAccessTokenReq) Reset()         { *m = GetAccessTokenReq{} }
func (m *GetAccessTokenReq) String() string { return proto.CompactTextString(m) }
func (*GetAccessTokenReq) ProtoMessage()    {}
func (*GetAccessTokenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c1d0c4837678df8, []int{4}
}

func (m *GetAccessTokenReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAccessTokenReq.Unmarshal(m, b)
}
func (m *GetAccessTokenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAccessTokenReq.Marshal(b, m, deterministic)
}
func (m *GetAccessTokenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccessTokenReq.Merge(m, src)
}
func (m *GetAccessTokenReq) XXX_Size() int {
	return xxx_messageInfo_GetAccessTokenReq.Size(m)
}
func (m *GetAccessTokenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccessTokenReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccessTokenReq proto.InternalMessageInfo

func (m *GetAccessTokenReq) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

type GetPreAuthCodeReq struct {
	AppID                string   `protobuf:"bytes,1,opt,name=appID,proto3" json:"appID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPreAuthCodeReq) Reset()         { *m = GetPreAuthCodeReq{} }
func (m *GetPreAuthCodeReq) String() string { return proto.CompactTextString(m) }
func (*GetPreAuthCodeReq) ProtoMessage()    {}
func (*GetPreAuthCodeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c1d0c4837678df8, []int{5}
}

func (m *GetPreAuthCodeReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPreAuthCodeReq.Unmarshal(m, b)
}
func (m *GetPreAuthCodeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPreAuthCodeReq.Marshal(b, m, deterministic)
}
func (m *GetPreAuthCodeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPreAuthCodeReq.Merge(m, src)
}
func (m *GetPreAuthCodeReq) XXX_Size() int {
	return xxx_messageInfo_GetPreAuthCodeReq.Size(m)
}
func (m *GetPreAuthCodeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPreAuthCodeReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetPreAuthCodeReq proto.InternalMessageInfo

func (m *GetPreAuthCodeReq) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

func init() {
	proto.RegisterType((*WXEncryptedMessage)(nil), "proto.WXEncryptedMessage")
	proto.RegisterType((*WXTicketReq)(nil), "proto.WXTicketReq")
	proto.RegisterType((*Resp)(nil), "proto.Resp")
	proto.RegisterType((*GetTicketReq)(nil), "proto.GetTicketReq")
	proto.RegisterType((*GetAccessTokenReq)(nil), "proto.GetAccessTokenReq")
	proto.RegisterType((*GetPreAuthCodeReq)(nil), "proto.GetPreAuthCodeReq")
}

func init() { proto.RegisterFile("wx.proto", fileDescriptor_6c1d0c4837678df8) }

var fileDescriptor_6c1d0c4837678df8 = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x51, 0x4d, 0xcf, 0xd2, 0x40,
	0x10, 0x0e, 0x50, 0x08, 0x0c, 0xc4, 0xe8, 0xe8, 0xa1, 0x12, 0x0f, 0xa6, 0x6a, 0xa2, 0x1e, 0x20,
	0x2a, 0x3f, 0x40, 0x14, 0x43, 0x3c, 0x90, 0x98, 0x42, 0x02, 0x31, 0xf1, 0x50, 0xb6, 0x63, 0xd9,
	0x60, 0x77, 0xd7, 0xee, 0x16, 0xe4, 0xe2, 0x2f, 0x78, 0x7f, 0xf4, 0x1b, 0xb6, 0x1f, 0xb4, 0x21,
	0x6f, 0x38, 0xed, 0x7c, 0x3c, 0xcf, 0xce, 0x3c, 0xcf, 0x40, 0xf7, 0xf8, 0x6f, 0xa4, 0x12, 0x69,
	0x24, 0xb6, 0xed, 0xe3, 0xfd, 0x07, 0x5c, 0x6f, 0xbe, 0x09, 0x96, 0x9c, 0x94, 0xa1, 0x70, 0x41,
	0x5a, 0x07, 0x11, 0xe1, 0x63, 0x68, 0xc5, 0x3a, 0x72, 0x1b, 0x2f, 0x1b, 0x6f, 0x7b, 0xfe, 0x39,
	0x44, 0x0f, 0x06, 0xb1, 0x8e, 0x96, 0x3c, 0x12, 0x81, 0x49, 0x13, 0x72, 0x9b, 0xb6, 0x55, 0xab,
	0xe1, 0x0b, 0xe8, 0x19, 0x1e, 0x93, 0x36, 0x41, 0xac, 0xdc, 0x96, 0x05, 0x5c, 0x0a, 0xf8, 0x0c,
	0xda, 0x42, 0x0a, 0x46, 0xae, 0x63, 0x3b, 0x59, 0xe2, 0xfd, 0x82, 0xfe, 0x7a, 0xb3, 0xe2, 0x6c,
	0x4f, 0xc6, 0xa7, 0xbf, 0x67, 0x50, 0xa0, 0xd4, 0xf7, 0x59, 0x3e, 0x3a, 0x4b, 0x70, 0x08, 0x5d,
	0x2e, 0x7e, 0xcb, 0xd5, 0x49, 0x15, 0x83, 0xcb, 0xfc, 0x3c, 0x94, 0xc9, 0x58, 0x49, 0x41, 0xc2,
	0x14, 0x43, 0xcb, 0x82, 0xf7, 0x19, 0x1c, 0x9f, 0xb4, 0x42, 0x04, 0x87, 0xc9, 0x90, 0xec, 0xb7,
	0x6d, 0xdf, 0xc6, 0x85, 0xc8, 0xe6, 0x45, 0x24, 0x82, 0x13, 0x06, 0x26, 0xc8, 0xbf, 0xb1, 0xb1,
	0xf7, 0x1a, 0x06, 0x73, 0x32, 0x37, 0x36, 0xf4, 0xde, 0xc1, 0x93, 0x39, 0x99, 0x29, 0x63, 0xa4,
	0xf5, 0x4a, 0xee, 0x49, 0xdc, 0x82, 0xfe, 0x48, 0x68, 0x9a, 0x9a, 0xdd, 0x57, 0x19, 0xd2, 0x83,
	0xd0, 0x8f, 0x77, 0x4d, 0xe8, 0xad, 0x37, 0x4b, 0x4a, 0x0e, 0x9c, 0x11, 0x4e, 0x00, 0x66, 0x64,
	0x0f, 0xb5, 0xd0, 0x11, 0x3e, 0xcf, 0xee, 0x38, 0xba, 0xbe, 0xde, 0xb0, 0x9f, 0xb7, 0xac, 0xf2,
	0x0f, 0xf0, 0xa8, 0x58, 0x9e, 0x11, 0x3f, 0x50, 0x88, 0x58, 0x32, 0x4b, 0x55, 0x75, 0xca, 0x7b,
	0xe8, 0x64, 0x1d, 0x7c, 0x9a, 0x97, 0xab, 0x0e, 0xd4, 0xb1, 0x13, 0xe8, 0x57, 0x54, 0xa3, 0x7b,
	0x21, 0xd4, 0xcd, 0xb8, 0x62, 0x55, 0x0c, 0xa8, 0xb2, 0xea, 0xbe, 0xd4, 0x58, 0x5f, 0xde, 0xfc,
	0x7c, 0x15, 0x71, 0xb3, 0x4b, 0xb7, 0x23, 0x26, 0xe3, 0xb1, 0x36, 0x74, 0x20, 0xb1, 0xe7, 0xc6,
	0x50, 0x32, 0x3e, 0x12, 0xff, 0x93, 0x8e, 0x2d, 0x76, 0xdb, 0xb1, 0xcf, 0xa7, 0xfb, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xf3, 0x23, 0xf0, 0x2e, 0xec, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WXServiceClient is the client API for WXService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WXServiceClient interface {
	DecryptMsg(ctx context.Context, in *WXEncryptedMessage, opts ...grpc.CallOption) (*Resp, error)
	TicketReceived(ctx context.Context, in *WXTicketReq, opts ...grpc.CallOption) (*Resp, error)
	Ticket(ctx context.Context, in *GetTicketReq, opts ...grpc.CallOption) (*Resp, error)
	AccessToken(ctx context.Context, in *GetAccessTokenReq, opts ...grpc.CallOption) (*Resp, error)
	PreAuthCode(ctx context.Context, in *GetPreAuthCodeReq, opts ...grpc.CallOption) (*Resp, error)
}

type wXServiceClient struct {
	cc *grpc.ClientConn
}

func NewWXServiceClient(cc *grpc.ClientConn) WXServiceClient {
	return &wXServiceClient{cc}
}

func (c *wXServiceClient) DecryptMsg(ctx context.Context, in *WXEncryptedMessage, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/proto.WXService/DecryptMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wXServiceClient) TicketReceived(ctx context.Context, in *WXTicketReq, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/proto.WXService/TicketReceived", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wXServiceClient) Ticket(ctx context.Context, in *GetTicketReq, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/proto.WXService/Ticket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wXServiceClient) AccessToken(ctx context.Context, in *GetAccessTokenReq, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/proto.WXService/AccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wXServiceClient) PreAuthCode(ctx context.Context, in *GetPreAuthCodeReq, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/proto.WXService/PreAuthCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WXServiceServer is the server API for WXService service.
type WXServiceServer interface {
	DecryptMsg(context.Context, *WXEncryptedMessage) (*Resp, error)
	TicketReceived(context.Context, *WXTicketReq) (*Resp, error)
	Ticket(context.Context, *GetTicketReq) (*Resp, error)
	AccessToken(context.Context, *GetAccessTokenReq) (*Resp, error)
	PreAuthCode(context.Context, *GetPreAuthCodeReq) (*Resp, error)
}

func RegisterWXServiceServer(s *grpc.Server, srv WXServiceServer) {
	s.RegisterService(&_WXService_serviceDesc, srv)
}

func _WXService_DecryptMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WXEncryptedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WXServiceServer).DecryptMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WXService/DecryptMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WXServiceServer).DecryptMsg(ctx, req.(*WXEncryptedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WXService_TicketReceived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WXTicketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WXServiceServer).TicketReceived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WXService/TicketReceived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WXServiceServer).TicketReceived(ctx, req.(*WXTicketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WXService_Ticket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WXServiceServer).Ticket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WXService/Ticket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WXServiceServer).Ticket(ctx, req.(*GetTicketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WXService_AccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WXServiceServer).AccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WXService/AccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WXServiceServer).AccessToken(ctx, req.(*GetAccessTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WXService_PreAuthCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPreAuthCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WXServiceServer).PreAuthCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WXService/PreAuthCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WXServiceServer).PreAuthCode(ctx, req.(*GetPreAuthCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _WXService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.WXService",
	HandlerType: (*WXServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DecryptMsg",
			Handler:    _WXService_DecryptMsg_Handler,
		},
		{
			MethodName: "TicketReceived",
			Handler:    _WXService_TicketReceived_Handler,
		},
		{
			MethodName: "Ticket",
			Handler:    _WXService_Ticket_Handler,
		},
		{
			MethodName: "AccessToken",
			Handler:    _WXService_AccessToken_Handler,
		},
		{
			MethodName: "PreAuthCode",
			Handler:    _WXService_PreAuthCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wx.proto",
}
