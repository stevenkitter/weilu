// Code generated by MockGen. DO NOT EDIT.
// Source: proto/wx.pb.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	proto "github.com/stevenkitter/weilu/proto"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockWXServiceClient is a mock of WXServiceClient interface
type MockWXServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockWXServiceClientMockRecorder
}

// MockWXServiceClientMockRecorder is the mock recorder for MockWXServiceClient
type MockWXServiceClientMockRecorder struct {
	mock *MockWXServiceClient
}

// NewMockWXServiceClient creates a new mock instance
func NewMockWXServiceClient(ctrl *gomock.Controller) *MockWXServiceClient {
	mock := &MockWXServiceClient{ctrl: ctrl}
	mock.recorder = &MockWXServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWXServiceClient) EXPECT() *MockWXServiceClientMockRecorder {
	return m.recorder
}

// DecryptMsg mocks base method
func (m *MockWXServiceClient) DecryptMsg(ctx context.Context, in *proto.WXEncryptedMessage, opts ...grpc.CallOption) (*proto.Resp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DecryptMsg", varargs...)
	ret0, _ := ret[0].(*proto.Resp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptMsg indicates an expected call of DecryptMsg
func (mr *MockWXServiceClientMockRecorder) DecryptMsg(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptMsg", reflect.TypeOf((*MockWXServiceClient)(nil).DecryptMsg), varargs...)
}

// TicketReceived mocks base method
func (m *MockWXServiceClient) TicketReceived(ctx context.Context, in *proto.WXTicketReq, opts ...grpc.CallOption) (*proto.Resp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TicketReceived", varargs...)
	ret0, _ := ret[0].(*proto.Resp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TicketReceived indicates an expected call of TicketReceived
func (mr *MockWXServiceClientMockRecorder) TicketReceived(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TicketReceived", reflect.TypeOf((*MockWXServiceClient)(nil).TicketReceived), varargs...)
}

// Ticket mocks base method
func (m *MockWXServiceClient) Ticket(ctx context.Context, in *proto.GetTicketReq, opts ...grpc.CallOption) (*proto.Resp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ticket", varargs...)
	ret0, _ := ret[0].(*proto.Resp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ticket indicates an expected call of Ticket
func (mr *MockWXServiceClientMockRecorder) Ticket(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ticket", reflect.TypeOf((*MockWXServiceClient)(nil).Ticket), varargs...)
}

// AccessToken mocks base method
func (m *MockWXServiceClient) AccessToken(ctx context.Context, in *proto.GetAccessTokenReq, opts ...grpc.CallOption) (*proto.Resp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccessToken", varargs...)
	ret0, _ := ret[0].(*proto.Resp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccessToken indicates an expected call of AccessToken
func (mr *MockWXServiceClientMockRecorder) AccessToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessToken", reflect.TypeOf((*MockWXServiceClient)(nil).AccessToken), varargs...)
}

// MockWXServiceServer is a mock of WXServiceServer interface
type MockWXServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockWXServiceServerMockRecorder
}

// MockWXServiceServerMockRecorder is the mock recorder for MockWXServiceServer
type MockWXServiceServerMockRecorder struct {
	mock *MockWXServiceServer
}

// NewMockWXServiceServer creates a new mock instance
func NewMockWXServiceServer(ctrl *gomock.Controller) *MockWXServiceServer {
	mock := &MockWXServiceServer{ctrl: ctrl}
	mock.recorder = &MockWXServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWXServiceServer) EXPECT() *MockWXServiceServerMockRecorder {
	return m.recorder
}

// DecryptMsg mocks base method
func (m *MockWXServiceServer) DecryptMsg(arg0 context.Context, arg1 *proto.WXEncryptedMessage) (*proto.Resp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecryptMsg", arg0, arg1)
	ret0, _ := ret[0].(*proto.Resp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptMsg indicates an expected call of DecryptMsg
func (mr *MockWXServiceServerMockRecorder) DecryptMsg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptMsg", reflect.TypeOf((*MockWXServiceServer)(nil).DecryptMsg), arg0, arg1)
}

// TicketReceived mocks base method
func (m *MockWXServiceServer) TicketReceived(arg0 context.Context, arg1 *proto.WXTicketReq) (*proto.Resp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TicketReceived", arg0, arg1)
	ret0, _ := ret[0].(*proto.Resp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TicketReceived indicates an expected call of TicketReceived
func (mr *MockWXServiceServerMockRecorder) TicketReceived(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TicketReceived", reflect.TypeOf((*MockWXServiceServer)(nil).TicketReceived), arg0, arg1)
}

// Ticket mocks base method
func (m *MockWXServiceServer) Ticket(arg0 context.Context, arg1 *proto.GetTicketReq) (*proto.Resp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ticket", arg0, arg1)
	ret0, _ := ret[0].(*proto.Resp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ticket indicates an expected call of Ticket
func (mr *MockWXServiceServerMockRecorder) Ticket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ticket", reflect.TypeOf((*MockWXServiceServer)(nil).Ticket), arg0, arg1)
}

// AccessToken mocks base method
func (m *MockWXServiceServer) AccessToken(arg0 context.Context, arg1 *proto.GetAccessTokenReq) (*proto.Resp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessToken", arg0, arg1)
	ret0, _ := ret[0].(*proto.Resp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccessToken indicates an expected call of AccessToken
func (mr *MockWXServiceServerMockRecorder) AccessToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessToken", reflect.TypeOf((*MockWXServiceServer)(nil).AccessToken), arg0, arg1)
}
